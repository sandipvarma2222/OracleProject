/* 1. Display customer id, first name, initials and last name of female customers who have some initials.*/
SELECT CUST_ID, CUST_FIRST_NAME, INITIALS, CUST_LAST_NAME
FROM BANK_CUST
WHERE CUST_GENDER='F'
AND INITIALS  IS NOT NULL;

/*  2. Write a query to show customer id, phone no.,state and full address of customers who live either in 'Karnataka' or 'Tamilnadu' in ascending order of the state.*/
SELECT CUST_ID, CUST_PHONE, CUST_ADDR_LINE1, CUST_ADDR_LINE2, CUST_STATE
FROM BANK_CUST_CONTACT
WHERE CUST_STATE IN ('Karnataka','Tamilnadu')
ORDER BY CUST_STATE;

/* 3. Display details (account no, primary customer id, current balance and a/c start date) of active SB accounts in the order of latest start date (first) to earliest start date (last).*/
SELECT ACCOUNT_NO, PRIMARY_CUST_ID, CURR_BAL_AMT, START_DATE
FROM BANK_SB_ACCOUNT
WHERE ACC_STATUS='Active'
ORDER BY START_DATE DESC;

/* 4. Display bank employee designation, id, name and gender of those employees who have a manager, sorted in descending order of designation and ascending order of employee name.*/
SELECT BANK_EMP_ID, DESIGNATION, MANAGER_ID, EMP_NAME, EMP_GENDER
FROM BANK_EMPLOYEE
WHERE MANAGER_ID IS NOT NULL
ORDER BY DESIGNATION DESC, EMP_NAME ASC;

/* 5. What are the minimum and maximum installment amounts of RD accounts which were started during year 2008?*/
SELECT MIN(INSTALLMENT_AMT), MAX(INSTALLMENT_AMT)
FROM BANK_RD_ACCOUNT
WHERE RD_START_DT BETWEEN '01-JAN-2008' AND '31-DEC-2008';

/* 6. Write a query to show designation and the no. of employees under each designation except 'ATTENDER'.*/
-- Arrange the output by no. of employees and then by designation.
SELECT COUNT(*) TOTAL_NO_OF_EMP , DESIGNATION
FROM BANK_EMPLOYEE
WHERE DESIGNATION <>'ATTENDER'
GROUP BY DESIGNATION;

/* 7. Write a query to show customer id and the no. of office phones they have of those customers who have more than one office phone.*/
SELECT CUST_ID, COUNT(*) "TOTAL OFFICE PHONES"
FROM BANK_CUST_CONTACT
WHERE CONTACT_TYPE='OFFICE'
GROUP BY CUST_ID
HAVING COUNT(*)>1;

/* 8. Display customer id, first & last names, home phone no. and city of those customers who live outside Karnataka.*/
SELECT BANK_CUST.CUST_ID, CUST_FIRST_NAME, CUST_LAST_NAME, CUST_PHONE, CUST_CITY
FROM BANK_CUST
INNER JOIN BANK_CUST_CONTACT
ON (BANK_CUST.CUST_ID =BANK_CUST_CONTACT.CUST_ID)
WHERE CUST_STATE NOT IN ('Karnataka');

/* 9. Show transaction details – SB a/c no., transaction type, date, description and amount, for transaction amounts > 1000. Sort the output based on a/c no, transaction type and date.*/
SELECT BANK_SB_ACCOUNT.ACCOUNT_NO, BANK_TRANSACTION.TRANS_TYPE, BANK_TRANSACTION.TRANS_DT, BANK_TRANSACTION.TRANS_AMT
FROM BANK_TRANSACTION
INNER JOIN BANK_SB_ACCOUNT ON (BANK_TRANSACTION.TRANS_ACC_NO=BANK_SB_ACCOUNT.ACCOUNT_NO)
 AND BANK_TRANSACTION.TRANS_AMT   >1000
ORDER BY BANK_SB_ACCOUNT.ACCOUNT_NO, BANK_TRANSACTION.TRANS_TYPE, BANK_TRANSACTION.TRANS_DT;

/* 10.Show customer id, his/her phone no.(s), SB account no., transaction date and amount of the customer(s) who have done ATM withdrawal transaction.*/
SELECT BANK_CUST.CUST_ID, BANK_CUST_CONTACT.CUST_PHONE, BANK_SB_ACCOUNT.ACCOUNT_NO, BANK_TRANSACTION.TRANS_DT, BANK_TRANSACTION.TRANS_AMT
FROM BANK_CUST
INNER JOIN BANK_CUST_CONTACT ON (BANK_CUST.CUST_ID=BANK_CUST_CONTACT.CUST_ID)
INNER JOIN BANK_SB_ACCOUNT ON (BANK_CUST.CUST_ID=BANK_SB_ACCOUNT.PRIMARY_CUST_ID)
INNER JOIN BANK_TRANSACTION ON (BANK_SB_ACCOUNT.ACCOUNT_NO=BANK_TRANSACTION.TRANS_ACC_NO)
WHERE BANK_TRANSACTION.TRANS_DESC LIKE '%ATM%';

/* 11.For every state and for every city find the total transactions performed by every customer. Get the data for every combination of the dimension. we need to display cust_id cust state , cust city and total number of transactions*/
SELECT BANK_CUST.CUST_ID, CUST_STATE, CUST_CITY, COUNT(*) "TOTAL TRANSACTIONS"
FROM BANK_CUST_CONTACT
INNER JOIN BANK_CUST ON (BANK_CUST_CONTACT.CUST_ID=BANK_CUST.CUST_ID)
INNER JOIN BANK_SB_ACCOUNT ON (BANK_CUST.CUST_ID=BANK_SB_ACCOUNT.PRIMARY_CUST_ID)
INNER JOIN BANK_TRANSACTION ON (BANK_SB_ACCOUNT.ACCOUNT_NO=BANK_TRANSACTION.TRANS_ACC_NO)
GROUP BY BANK_CUST.CUST_ID, BANK_CUST_CONTACT.CUST_STATE, BANK_CUST_CONTACT.CUST_CITY;

/* 12. For every state find the total number of credit transactions performed by every customer which exceeds 10k.*/
SELECT CUST_STATE, COUNT(TRANS_NO) TRANSACTION_COUNT, SUM(TRANS_AMT) TOTAL
FROM BANK_CUST_CONTACT  BCS 
INNER JOIN BANK_RD_ACCOUNT BAR ON (BCS.CUST_ID=BAR.RD_CUST_ID)
INNER JOIN BANK_SB_ACCOUNT BAS ON (BCS.CUST_ID=BAS.PRIMARY_CUST_ID)
INNER JOIN BANK_TRANSACTION BT ON (BT.TRANS_ACC_NO=BAR.ACCOUNT_NO OR BT.TRANS_ACC_NO=BAS.ACCOUNT_NO)
 GROUP BY CUST_STATE
HAVING SUM(TRANS_AMT)>10000;

/* 13.Write a function to count the number of customers The function should count the total number of customers and return the count.*/
CREATE OR REPLACE FUNCTION F_COUNT RETURN NUMBER
IS
V_COUNT NUMBER;
BEGIN
SELECT COUNT(DISTINCT CUST_ID) INTO V_COUNT FROM BANK_CUST;
RETURN V_COUNT;
END F_COUNT;

/* 14.Write a procedure to add a customer to the bank_cust table
a.The cust_id should be auto-generated
b.The customer first,last and initial should be in initcap
c.The gender should be m or f
d.The customer type should be ind or corp
e.The default gender should be f
f.The default cust type should be ind*/
CREATE OR REPLACE PROCEDURE ADD_CUST 
(P_CUSTFNAME BANK_CUST.CUST_FIRST_NAME%TYPE,
 P_INITIALS BANK_CUST.INITIALS%TYPE,
 P_CUSTLNAME BANK_CUST.CUST_LAST_NAME%TYPE,
 P_CUST_GENDER BANK_CUST.CUST_GENDER%TYPE DEFAULT 'F',
 P_CUST_DOB BANK_CUST.CUST_DOB%TYPE,
 P_CUST_TYPE BANK_CUST.CUST_TYPE%TYPE DEFAULT 'IND')
IS
V_COUNT NUMBER;
V_CUST_ID BANK_CUST.CUST_ID%TYPE;
ERRORE EXCEPTION;
BEGIN
  IF UPPER(P_CUST_GENDER) NOT IN ('M','F') THEN
    RAISE ERRORE;
  END IF;
  IF UPPER(P_CUST_TYPE) NOT IN ('IND','CORP') THEN
    RAISE ERRORE;
  END IF;
 SELECT COUNT(*) INTO V_COUNT FROM BANK_CUST;
  IF V_COUNT=0 THEN
    V_CUST_ID:=1001;
  ELSE
    SELECT MAX(CUST_ID)+1 INTO V_CUST_ID FROM BANK_CUST;
  END IF;
  INSERT INTO BANK_CUST VALUES
  (V_CUST_ID,INITCAP(P_CUSTFNAME),INITCAP(P_INITIALS),INITCAP(P_CUSTLNAME),UPPER(P_CUST_GENDER),P_CUST_DOB ,UPPER(P_CUST_TYPE) );
 EXCEPTION
   WHEN ERRORE THEN
    RAISE_APPLICATION_ERROR (-20001,'THE GENDER OR CUSTOMER TYPE HAS SPECIFIED INCORRECTLY');
   WHEN OTHERS THEN
    NULL;
END ADD_CUST ;

/* 15.write a function to accept a cust_id and return 1 if  customer is existing and -1 if customer is not existing.*/
CREATE OR REPLACE FUNCTION CHECK_CUSTID (PCUST IN NUMBER) RETURN NUMBER
 IS 
VTEMP VARCHAR2(4);
BEGIN
SELECT 'A' INTO VTEMP FROM BANK_CUST WHERE CUST_ID=PCUST;
IF VTEMP='A' THEN
RETURN 1;
END IF;
EXCEPTION
WHEN NO_DATA_FOUND THEN
RETURN -1;
END;

/* 16.Write a procedure to add a bank customer contact
a.The cust_id should exist in the bank_cust table
b.The cust_phone should be max 10 digits min 6 digits
c.The contact type should be home or office
d.Cust_addr_line1,cust_addr_line2,cust_city,cust_state should be in initcap
e.Cust_pin should not exceed 6 digits
f.The customer contact type default should be home*/
CREATE OR REPLACE PROCEDURE CUST_CONTACT
(P_CUST_ID  		BANK_CUST_CONTACT.CUST_ID%TYPE,
 P_CUST_PHONE 		BANK_CUST_CONTACT.CUST_PHONE%TYPE,
 P_CONTACT_TYPE 		BANK_CUST_CONTACT.CONTACT_TYPE%TYPE DEFAULT 'HOME',
 P_CUST_ADDR_LINE1 	BANK_CUST_CONTACT.CUST_ADDR_LINE1%TYPE,
 P_CUST_ADDR_LINE2 	BANK_CUST_CONTACT.CUST_ADDR_LINE2%TYPE,
 P_CUST_CITY 		BANK_CUST_CONTACT.CUST_CITY%TYPE,
 P_CUST_STATE 		BANK_CUST_CONTACT.CUST_STATE%TYPE,
 P_CUST_PIN 		BANK_CUST_CONTACT.CUST_PIN%TYPE) IS
V_TEMP VARCHAR(2);
ERRORA EXCEPTION;
ERRORB EXCEPTION;
ERRORC EXCEPTION;
ERRORD EXCEPTION;
BEGIN
  SELECT 'A' INTO V_TEMP FROM BANK_CUST 
  WHERE CUST_ID=P_CUST_ID;
 IF V_TEMP<>'A' THEN
  RAISE ERRORA;
 END IF;
 IF LENGTH(P_CUST_PHONE) NOT BETWEEN 6 AND 10 THEN
  RAISE ERRORB;
 END IF;
 IF P_CONTACT_TYPE NOT IN ('HOME','OFFICE') THEN
  RAISE ERRORC;
 END IF; 
 IF LENGTH(P_CUST_PIN)<>6 THEN
  RAISE ERRORD;
 END IF; 
 INSERT INTO BANK_CUST_CONTACT VALUES
 (P_CUST_ID,P_CUST_PHONE,P_CONTACT_TYPE,INITCAP(P_CUST_ADDR_LINE1),INITCAP(P_CUST_ADDR_LINE2),INITCAP(P_CUST_CITY),INITCAP(P_CUST_STATE),
 P_CUST_PIN);
 EXCEPTION
 WHEN ERRORA THEN
 RAISE_APPLICATION_ERROR(-20002,'THE CUSTOMER ID IS NOT CORRECT');
 WHEN ERRORB THEN
 RAISE_APPLICATION_ERROR(-20003,'THE CUSTOMER PHONE IS NOT CORRECT');
 WHEN ERRORC THEN
 RAISE_APPLICATION_ERROR(-20004,'THE CUSTOMER CONTACT TYPE IS NOT CORRECT');
 WHEN ERRORD THEN
 RAISE_APPLICATION_ERROR(-20005,'THE CUSTOMER CONTACT PIN IS NOT CORRECT');
 WHEN OTHERS THEN
  NULL;
END CUST_CONTACT;

/* 17.Write a procedure to del the customer by name or by giving the cust_id the procedure name should not change whether we give name or cust_id.*/
CREATE OR REPLACE PACKAGE CUST_PACK IS
PROCEDURE DEL_CUSTID (CID IN NUMBER);
PROCEDURE DEL_CUSTFNAME (CFNAME IN VARCHAR2);
END CUST_PACK;
 
CREATE OR REPLACE PACKAGE BODY CUST_PACK IS
PROCEDURE DEL_CUSTID (CID IN NUMBER) IS
BEGIN
DELETE BANK_CUST WHERE CUST_ID=CID;
IF SQL%FOUND=TRUE THEN
DBMS_OUTPUT.PUT_LINE(SQL%ROWCOUNT||' ROWS DELETED');
ELSE
DBMS_OUTPUT.PUT_LINE('CUST ID NOT FOUND');
END IF;
END DEL_CUSTID;
PROCEDURE DEL_CUSTFNAME (CFNAME IN VARCHAR2) IS
BEGIN
DELETE BANK_CUST WHERE CUST_FIRST_NAME=CFNAME;
IF SQL%FOUND=TRUE THEN
DBMS_OUTPUT.PUT_LINE(SQL%ROWCOUNT||' ROWS DELETED');
ELSE
DBMS_OUTPUT.PUT_LINE('THE CUST NAME NOT FOUND');
END IF;
END DEL_CUSTFNAME;
END CUST_PACK;

/* 18.Write a procedure to open a saving account in the bank*/
CREATE OR REPLACE PROCEDURE SAVING_ACC
(P_PRIMARY_CUST_ID BANK_SB_ACCOUNT.PRIMARY_CUST_ID%TYPE,
P_SECONDARY_CUST_ID BANK_SB_ACCOUNT.SECONDARY_CUST_ID%TYPE DEFAULT NULL,
P_CURR_BAL_AMT BANK_SB_ACCOUNT.CURR_BAL_AMT%TYPE,
P_ACC_STATUS BANK_SB_ACCOUNT.ACC_STATUS%TYPE,
P_START_DATE BANK_SB_ACCOUNT.START_DATE%TYPE,
P_END_DATE BANK_SB_ACCOUNT.END_DATE%TYPE) IS
V_TEMP VARCHAR(2);
V_COUNT NUMBER;
V_ACC_NO BANK_SB_ACCOUNT.ACCOUNT_NO%TYPE;
P_ACCOUNT_NO BANK_SB_ACCOUNT.ACCOUNT_NO%TYPE;
ERRORA EXCEPTION;
BEGIN
SELECT 'A' INTO V_TEMP FROM BANK_CUST WHERE CUST_ID = P_PRIMARY_CUST_ID ;
 IF V_TEMP<>'A' THEN
  RAISE ERRORA;
END IF;
 SELECT COUNT(*) INTO V_COUNT FROM BANK_CUST;
  IF V_COUNT=0 THEN
    P_ACCOUNT_NO:=1000012001;
  ELSE
    SELECT MAX(ACCOUNT_NO)+1 INTO P_ACCOUNT_NO FROM BANK_SB_ACCOUNT;
  END IF;
INSERT INTO BANK_SB_ACCOUNT VALUES(P_ACCOUNT_NO,P_PRIMARY_CUST_ID,P_SECONDARY_CUST_ID,P_CURR_BAL_AMT,P_ACC_STATUS,P_START_DATE, P_END_DATE);
 EXCEPTION
 WHEN ERRORA THEN
 RAISE_APPLICATION_ERROR(-20002,'THE CUSTOMER ID IS NOT CORRECT');
 WHEN OTHERS THEN
  NULL;
END SAVING_ACC;

/* 19.Write a procedure to make a deposit in the savings bank account*/
CREATE OR REPLACE PROCEDURE SB_ACCOUNT (
  P_PRIMARY_CUST_ID BANK_SB_ACCOUNT.PRIMARY_CUST_ID%TYPE,
  P_SECONDARY_CUST_ID BANK_SB_ACCOUNT.SECONDARY_CUST_ID%TYPE DEFAULT NULL,
  P_CURR_BAL_AMT BANK_SB_ACCOUNT.CURR_BAL_AMT%TYPE,
  P_ACC_STATUS BANK_SB_ACCOUNT.ACC_STATUS%TYPE DEFAULT 'Active',
  P_START_DATE BANK_SB_ACCOUNT.START_DATE%TYPE DEFAULT SYSDATE,
  P_END_DATE BANK_SB_ACCOUNT.END_DATE%TYPE DEFAULT NULL
) IS
V_COUNT NUMBER;
V_ACCOUNT_NO BANK_SB_ACCOUNT.ACCOUNT_NO%TYPE;
V_TEMP NUMBER;
V_MIN_AMT NUMBER;
BEGIN
 V_TEMP:=CHECK_CUST_ID(P_PRIMARY_CUST_ID);
 IF V_TEMP=-1 THEN
  RAISE ERRORB;
 END IF;
 IF P_SECONDARY_CUST_ID IS NOT NULL THEN
  V_TEMP:=CHECK_CUST_ID(P_PRIMARY_CUST_ID);
    IF V_TEMP=-1 THEN
      RAISE ERRORC;
    END IF;
 END IF;
 IF INITCAP(P_ACC_STATUS) NOT IN ('Active','Closed') THEN
    RAISE ERRORD;
 END IF;
 SELECT MIN_AMT INTO V_MIN_AMT FROM BANK_INT_RATE WHERE ACCOUNT_TYPE_CD='SB';
 IF P_CURR_BAL_AMT <V_MIN_AMT OR P_CURR_BAL_AMT IS NULL THEN
    RAISE ERRORE;
 END IF;
 V_COUNT:=SB_ACCOUNT_COUNT;
 IF V_COUNT=0 THEN
    V_ACCOUNT_NO:=1000012001;
 ELSE
    SELECT MAX(ACCOUNT_NO)+1 INTO V_ACCOUNT_NO FROM BANK_SB_ACCOUNT;
 END IF;
INSERT INTO BANK_SB_ACCOUNT 
VALUES (V_ACCOUNT_NO,P_PRIMARY_CUST_ID,P_SECONDARY_CUST_ID,
P_CURR_BAL_AMT,INITCAP(P_ACC_STATUS),P_START_DATE,P_END_DATE);
SELECT COUNT(*) INTO V_COUNT FROM BANK_TRANSACTION;
IF V_COUNT=0 THEN
 INSERT INTO BANK_TRANSACTION VALUES (100001201,'CR',SYSDATE,V_ACCOUNT_NO,'OPENING NEW ACCOUNT',P_CURR_BAL_AMT,NULL);
ELSE
 SELECT MAX(TRANS_NO)+1 INTO V_COUNT FROM BANK_TRANSACTION ;
 INSERT INTO BANK_TRANSACTION VALUES (V_COUNT,'CR',SYSDATE,V_ACCOUNT_NO,'OPENING NEW ACCOUNT',P_CURR_BAL_AMT,NULL);
END IF;
EXCEPTION
  WHEN ERRORB THEN
  RAISE_APPLICATION_ERROR(-20006,'THE PRIMARY ID IS NOT CORRECT');
  WHEN ERRORC THEN
  RAISE_APPLICATION_ERROR(-20007,'THE SECONDARY ID IS NOT CORRECT');
  WHEN ERRORD THEN
  RAISE_APPLICATION_ERROR(-20008,'THE STATUS IS NOT CORRECT');
  WHEN ERRORE THEN
  RAISE_APPLICATION_ERROR(-20009,'THE BALANCE SHOULD BE GREATER OR EQUAL 1000');
  WHEN OTHERS THEN
  NULL;
END SB_ACCOUNT;

/* 20.Write a procedure to make a withdrawal in the savings bank account
a.While making withdrawal or deposit the transaction table and account balance should be appropriately updated
b.Don’t allow withdrawal if the account balance is <=1000.*/
CREATE OR REPLACE PROCEDURE SB_WITHDRAWAL (P_TRANS_ACC_NO BANK_TRANSACTION.TRANS_ACC_NO%TYPE,
                          P_TRANS_DESC BANK_TRANSACTION.TRANS_DESC%TYPE,
                          P_TRANS_AMT BANK_TRANSACTION.TRANS_AMT%TYPE) IS
V_COUNT NUMBER;
V_CURR_BAL_AMT BANK_SB_ACCOUNT.CURR_BAL_AMT%TYPE;
BEGIN
SELECT CURR_BAL_AMT INTO V_CURR_BAL_AMT FROM BANK_SB_ACCOUNT WHERE ACCOUNT_NO=P_TRANS_ACC_NO;
IF V_CURR_BAL_AMT<=1000 THEN
RAISE ERRORA;
END IF;
SELECT COUNT(*) INTO V_COUNT FROM BANK_TRANSACTION;
IF V_COUNT=0 THEN
  INSERT INTO BANK_TRANSACTION VALUES (100001201,'DB',SYSDATE,P_TRANS_ACC_NO,P_TRANS_DESC,P_TRANS_AMT,NULL);
ELSE
 SELECT MAX(TRANS_NO)+1 INTO V_COUNT FROM BANK_TRANSACTION ;
 INSERT INTO BANK_TRANSACTION VALUES (V_COUNT,'DB',SYSDATE,P_TRANS_ACC_NO,P_TRANS_DESC,P_TRANS_AMT,NULL);
 UPDATE BANK_SB_ACCOUNT SET CURR_BAL_AMT=CURR_BAL_AMT-P_TRANS_AMT WHERE ACCOUNT_NO=P_TRANS_ACC_NO;
END IF;
EXCEPTION 
WHEN ERRORA THEN
RAISE_APPLICATION_ERROR(-20010,'THE BALANCE IS INSUFFICIENT');
WHEN NO_DATA_FOUND THEN
RAISE_APPLICATION_ERROR(-20011,'INVALID ACCOUNT NUMBER');
END  SB_WITHDRAWAL;  

